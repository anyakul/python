Примеры:

1) Типы данных и переменная
2) # ввод и вывод данных. print, input
3) Арифметические операции +, -, *, /, %, //, **, ⊕, ⊖, (), сокращенные операции
4) Логические операции >, >=, <, <=, ==, !=, not, and, or - не путать с &, |, ^, is, is not, in, not in, gen
5) Управляющие конструкции if, if-else
6) Управляющие конструкции while
7) Управляющие конструкции while else
8) Управляющие конструкции for
9) Строки
10) Списки
11) Функции
12) Запись файла
13) Чтение файла
14) Импорт функций из файла
15) Функции со значением по умолчанию
16) Функции с неограниченным числом элементов
17) Рекурсия
18) Кортежи
19) Словарь
20) Множества
21) Операции с множествами
22) Неизменяемое множество
23) Списки. Добавление удаление элементов
24-25) lambda функции
26) List Comprehension
27) квадраты чётных чисел
28) select
29) map
30) filter
31) zip
32) enumerate
33) Сложение двух чисел

Задания:
1) Напишите программу, которая принимает на вход два числа и проверяет, является ли одно число квадратом другого.
5, 25 -> да
4, 16 -> да
25, 5 -> да
8,9 -> нет

2) Напишите программу, которая на вход принимает 5 чисел (можно списком) и находит максимальное из них.
1. 1, 4, 8, 7, 5 -> 8
78, 55, 36, 90, 2 -> 90

3) Напишите программу, которая будет на вход принимать число N и выводить числа от -N до N
5 -> -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5

4) Напишите программу, которая будет принимать на вход дробь и показывать первую цифру дробной части числа.
6,78 -> 7
5 -> нет
0,34 -> 3

5) Напишите программу, которая принимает на вход число и проверяет, кратно ли оно 10 или 15, но не 30.

6) Напишите программу, которая принимает на вход цифру, обозначающую день недели, и проверяет, является ли этот день выходным.
6 -> да
7 -> да
1 -> нет

7) Напишите программу для. проверки истинности утверждения ¬(X ⋁ Y ⋁ Z) = ¬X ⋀ ¬Y ⋀ ¬Z для всех значений предикат. (¬ отрицание, ∧ и, ∨ или)

8) Напишите программу, которая принимает на вход координаты точки (X и Y), причём X ≠ 0 и Y ≠ 0, и выдаёт номер четверти плоскости, в которой находится эта точка (или на какой оси она находится).
x=34; y=-30 -> 4
x=2; y=4-> 1
x=-34; y=-30 -> 3

9) Напишите программу, которая по заданному номеру четверти, показывает диапазон возможных координат точек в этой четверти (x и y).

10) Напишите программу, которая принимает на вход координаты двух точек и находит расстояние между ними в 2D пространстве. 
A (3,6); B (2,1) -> 5,09
A (7,-5); B (1,-1) -> 7,21

11) Напишите программу, которая принимает на вход число N и выдаёт последовательность из N членов. (умножаем на -3)
Для N = 5: 1, -3, 9, -27, 81

12) Для натурального n создать словарь индекс-значение, состоящий из элементов последовательности 3n + 1.
Для n = 6: {1: 4, 2: 7, 3: 10, 4: 13, 5: 16, 6: 19}

13) Напишите программу, в которой пользователь будет задавать две строки, а программа - определять количество вхождений одной строки в другой.

14) Напишите программу, которая принимает на вход веественное число и показывает сумму его цифр
6782 -> 23
0.56 -> 11

15) Напишите программу, которая принимает на вход число N и выдает набор произведений чисел от 1 до N
пусть N = 4, тогда [ 1, 2, 6, 24 ] (1, 1*2, 1*2*3, 1*2*3*4)

16) Задайте список из n чисел последовательности (1 + 1/n)^n и выведите на экран их сумму
6 -> 1; 4,2; 7,3; 10,4; 13,5; 16,6; 19

17) Реализуйте алгоритм перемешивания списка

18) Задайте список из N элементов, заполненных числами из промежутка [-N, N]. Найдите произведение элементов на указанных позициях. Позиции хранятся в файле file.txt в одной строке одно число.

19) Задайте список. Напишите программу, которая определит, присутствует ли в заданном списке строк некое число.

20) Напишите программу, которая определит позицию второго вхождения строки в списке либо сообщит, что её нет.

*Пример:*
- список: ["qwe", "asd", "zxc", "qwe", "ertqwe"], ищем: "qwe", ответ: 3
- список: ["йцу", "фыв", "ячс", "цук", "йцукен", "йцу"], ищем: "йцу", ответ: 5
- список: ["йцу", "фыв", "ячс", "цук", "йцукен"], ищем: "йцу", ответ: -1
- список: ["123", "234", 123, "567"], ищем: "123", ответ: -1
- список: [], ищем: "123", ответ: -1

21) Реализуйте алгоритм задания случайных чисел без использования встроенного генератора псевдослучайных чисел.

22) Задайте список из нескольких чисел. Напишите программу, которая найдёт сумму элементов списка, стоящих на нечётной позиции.
[2, 3, 5, 9, 3] -> на нечётных позициях элементы 3 и 9, ответ: 12

23) Напишите программу, которая найдёт произведение пар чисел списка. Парой считаем первый и последний элемент, второй и предпоследний и т.д.
[2, 3, 4, 5, 6] => [12, 15, 16];
[2, 3, 5, 6] => [12, 15]

24) Задайте список из вещественных чисел. Напишите программу, которая найдёт разницу между максимальным и минимальным значением дробной части элементов.
[1.1, 1.2, 3.1, 5, 10.01] => 0.19

25) Напишите программу, которая будет преобразовывать десятичное число в двоичное.
45 -> 101101
3 -> 11
2 -> 10

26) Задайте число. Составьте список чисел Фибоначчи, в том числе для отрицательных индексов.
для k = 8 список будет выглядеть так: [-21 ,13, -8, 5, −3, 2, −1, 1, 0, 1, 1, 2, 3, 5, 8, 13, 21] F−n = (−1)n+1Fn [Негафибоначчи]

27) Задайте строку из набора чисел. Напишите программу, которая покажет большее и меньшее число. В качестве символа-разделителя используйте пробел.

28) Найдите корни квадратного уравнения Ax² + Bx + C = 0 двумя способами:
с помощью математических формул нахождения корней квадратного уравнения
с помощью дополнительных библиотек Python (например, numpy.roots)

29) Задайте два числа. Напишите программу, которая найдёт НОК (наименьшее общее кратное) этих двух чисел.

один из часто используемых в математике способов — это нахождение НОК при помощи разложения чисел на простые множители. В общем случае алгоритм будет выглядеть следующим образом:
разложить оба числа на простые множители;
выбрать одну группу множителей;
добавить к ним множители из второй группы, которые отсутствуют в выбранной;
найти их произведение.

30) Вычислить число c заданной точностью d
при $d = 0.001, π = 3.141.$ $10^{-1} ≤ d ≤10^{-10}$
Можно округлить пи из math, там точность 15 знаков

31) Задайте натуральное число N. Напишите программу, которая составит список простых множителей числа N.

32) Задайте последовательность чисел. Напишите программу, которая выведет список неповторяющихся элементов исходной последовательности.

33) Задана натуральная степень k. Сформировать случайным образом список коэффициентов (значения от 0 до 100) многочлена и записать в файл многочлен степени k.
Пример:
k=2 => 2x² + 4x + 5 = 0 или x² + 5 = 0 или 10*x² = 0

34) Даны два файла, в каждом из которых находится запись многочлена. Задача - сформировать файл, содержащий сумму многочленов.

Как разложить число на простые множители.
Для того чтобы разложить число на простые множители нужно, для начала, поделить его на 2. Если число разделится на 2 без остатка, то 2 – это первый множитель. Далее полученный результат опять делим на 2, если число разделится на 2 без остатка, то второй множитель тоже 2. Если же при делении получается остаток, то пробуем делим на 3, 4, ... n, до тех пор число не разделится без остатка.

35) В файле находится N натуральных чисел, записанных через пробел. Среди чисел не хватает одного, чтобы выполнялось условие A[i] - 1 = A[i-1]. Найдите это число.

36) Дан список чисел. Создайте список, в который попадают числа, описываемые возрастающую последовательность. Порядок элементов менять нельзя.
[1, 5, 2, 3, 4, 6, 1, 7] => [1, 2, 3] или [1, 7] или [1, 6, 7] и т.д.

37) Напишите программу, удаляющую из текста все слова, содержащие "абв".

38) Создайте программу для игры с конфетами человек против человека.
Условие задачи: На столе лежит 2021 конфета. Играют два игрока делая ход друг после друга. Первый ход определяется жеребьёвкой. За один ход можно забрать не более чем 28 конфет. Все конфеты оппонента достаются сделавшему последний ход. Сколько конфет нужно взять первому игроку, чтобы забрать все конфеты у своего конкурента?
a) Добавьте игру против бота
b) Подумайте как наделить бота "интеллектом"

39) Создайте программу для игры в "Крестики-нолики".

40) Реализуйте RLE алгоритм: реализуйте модуль сжатия и восстановления данных.
Входные и выходные данные хранятся в отдельных текстовых файлах.
Кодирование длин серий (англ. run-length encoding, RLE) или кодирование повторов — алгоритм сжатия данных, заменяющий повторяющиеся символы (серии) на один символ и число его повторов. Серией называется последовательность, состоящая из нескольких одинаковых символов.

41) Напишите программу вычисления арифметического выражения заданного строкой. Используйте операции +,-,/,*. приоритет операций стандартный.
    2+2 => 4;    
    1+2*3 => 7;  
    1-2*3 => -5;  
    - Добавьте возможность использования скобок, меняющих приоритет операций.
        1+2*3 => 7;      
        (1+2)*3 => 9;

42) Дана последовательность чисел. Получить список уникальных элементов заданной последовательности.
[1, 2, 3, 5, 1, 5, 3, 10] => [2, 10]

43) Система собирает информацию с датчиков, в ней есть 
модуль логирования, который заносит в журнал все 
обращения к датчикам. В системе есть модуль, выполняющий обращения для получения данных с датчиков и модуль генерации html-представления. Запуск системы осуществляется из головного модуля.
