1) Даны 2 действительных числа a и b. Получить их сумму, разность произведение

2) Даны действительные числа x и y. Получить (|x|-|y|)/(1+|x*y|)

3) Дана длина ребра куба. Найти объем куба и площадь его боковой поверхности.

4) Даны два действительных числа. Найти среднее арифметическое и среднее геометрическое этих чисел

5) Даны катеты прямоугольного треугольника. Найти его гипотенузу и площадь.

6) Вводится с клавиатуры цена товара в копейках. Необходимо представить эту цену в виде X руб. XX коп. 
Например, вводится число 101. Необходимо вывести 1 руб. 01 коп.

7) Создать строку равную третьему символу введенной строки.
Создать строку равную предпоследнему символу введенной строки.
Создать строку равную первым пяти символам введенной строки.
Создать строку равную введенной строку без последних двух символов.
Создать строку равную всем элементам введенной строки с четными индексами. (считая, что индексация начинается с 0, поэтому символы выводятся 	начиная с первого, индексы 0,2,4,6….).

8) Введите число. Если это число делиться на 1000 без остатка, то выведите на экран "millennium"

9) В семье N свадьба. Они решили выбрать заведение, где будут праздновать в зависимости от количества людей, которое прибудет к утру. 
Если их будет больше 50 - закажут ресторан, если от 20 до 50 -то кафе, а если меньше 20 то отпраздную дома.
Вывести "ресторан", "кафе", "дом" в зависимости от количества гостей (прочитать переменную с консоли)

10) Ввести строку. Если длина строки больше 10 символов, то создать новую строку с 3 восклицательными знаками в конце  ('!!!') и вывести на экран.
Если меньше 10, то вывести на экран второй символ строки

11) Ввести строку. Вывести на экран букву, которая находится в середине этой строки. 
Также, если эта центральная буква равна первой букве в строке, то создать и вывести часть строки между первым и последним символами исходной строки.
(подсказка: для получения центральной буквы, найдите длину строки и разделите ее пополам. Для создания результирующий строки используйте срез)

12) Дан список целых чисел. 
Создать новый список, каждый элемент которого равен исходному элементу умноженному на -2

13) Дан список целых чисел. Подсчитать сколько четных чисел в списке

14) Дан словарь: {'test': 'test_value', 'europe': 'eur', 'dollar': 'usd', 'ruble': 'rub'}
Добавить каждому ключу число равное длине этого ключа (пример {‘key’: ‘value’} -> {‘key3’: ‘value’}). Чтобы получить список ключей - использовать метод .keys()

(подсказка: создается новый ключ с цифрой в конце, старый удаляется)

15) Дан список. Создать новый список, сдвинутый на 1 элемент влево
Пример: 1 2 3 4 5 ->  2 3 4 5 1

16) Написать программу, в которой вводятся два операнда Х и Y и знак операции sign (+, –, /, *). Вычислить результат Z в зависимости от знака. Предусмотреть реакции на возможный неверный знак операции, а также на ввод Y=0 при делении. Организовать возможность многократных вычислений без перезагрузки программа (т.е. построить бесконечный цикл). В качестве символа прекращения вычислений принять ‘0’ (т.е. sign='0').

17) Два натуральных числа называют дружественными, если каждое из них равно сумме всех делителей другого, кроме самого этого числа. Найти все пары дружественных чисел, лежащих в диапазоне от 200 до 300. [02-3.2-HL02]

18) Для заданного числа N составьте программу вычисления суммы
S=1+1/2+1/3+1/4+...+1/N, где N – натуральное число. [02-3.2-ML21]

19) В массиве целых чисел с количеством элементов 19 определить максимальное число и заменить им все четные по значению элементы. [02-4.1-BL19]

20) Задан целочисленный массив. Определить количество участков массива, на котором элементы монотонно возрастают (каждое следующее число больше предыдущего). [02-4.1-ML27]

21) Дана целочисленная квадратная матрица. Найти в каждой строке наибольший элемент и поменять его местами с элементом главной диагонали. [02-4.2-ML22]

22) В заданной строке расположить в обратном порядке все слова. Разделителями слов считаются пробелы. [02-7.2-HL08]

23) Для каждого натурального числа в промежутке от m до n вывести все делители, кроме единицы и самого числа. m и n вводятся с клавиатуры. 
Пример:m =100, n = 105
100: 2 4 5 10 20 25 50 
101: 
102: 2 3 6 17 34 51 
103: 
104: 2 4 8 13 26 52 
105: 3 5 7 15 21 35 

24) Создать список поездов. Структура словаря: номер поезда,
пункт и время прибытия, пункт и время отбытия. Вывести все сведения о поездах, время пребывания в пути которых превышает 7 часов 20 минут.[02-7.3-ML02]
Примечание: данное задание подразумевает самостоятельное изучение принципов работы со временем в Python(библиотека datetime)

25) Классы User

26) Условие задания: напишите свой первый класс Triangle, в котором есть поля angle_1, angle_2, angle_3 и который при инициализации проверяет, что все введенные числа положительные и что сумма углов треугольника равна 180°.
В случае, если треугольник может существовать, конструктор класса должен напечатать текст Triangle initialized, а если такой треугольник существовать не может, то Initialization failed.

Программы:

1) Бегун готовится к соревнованиям. Сейчас он может пробежать start километров, а на соревнованиях ему нужно будет пробежать goal километров. До соревнования осталось days дней. Во время подготовки к соревнованиям спортсмен может увеличивать дистанцию, которую он пробегает, не больше чем на 10% в день. В день соревнования тренироваться нельзя.
Например, если до начала тренировок спортсмен пробегает 10 км, то тренировочный график должен выглядеть вот так:
11.0 км — 1 день 
12.1 км — 2 день 
13.31 км — 3 день 
14.641 км — 4 день 
и так далее. 

Напишите программу, которая рассчитывает, успеет ли спортсмен подготовиться к соревнованиям? Выведите True, если успеет и False, если не успеет. 

Списки и классы в Python.
1) Создайте класс объектов Auto для подержанных машин со следующими характеристиками:
1.	Марка.
2.	Модель.
3.	Год производства.
4.	Пробег.
5.	Цена. 
6.	Отечественное или зарубежное производство.

2) Создайте 5 объектов со следующими характеристиками:
KiaSor: «Kia», «Sorrento», 2003, 223 000 км, 415 000 руб, производство: Россия
HyunSol: «Hyundai», «Solaris», 2015, 41 000 км, 869 000 руб, производство: Корея
VolkPas: «Volkswagen», «Passat», 2012, 127 000 км, 900 000 руб производство: Германия
LadaPri: «Lada», «Priora», 2011, 139 000 км, 150 000 руб, производство: Россия
UazPat: «UAZ», «Patriot», 2011, 150 000 км, 345 400 руб, производство: Россия

3а. Создайте метод класса makeModel, позволяющий распечатать список объектов, причем на печать должны быть выведены только марка и модель автомобиля:
Например, название объекта auto1: ‘Kia Sorrento‘

3b. Создайте метод класса, позволяющий распечатать все свойства объекта, например:
'Kia Sorrento - Price: RUR415000, Production Year: 2003, Mileage: 223000' 

4. Создайте список listOfCarNames, который содержит названия (марка+модель) всех автомобилей из списка выше.

5. Создайте функцию, в результате которой возникнет список sortedByMileage, в котором содержатся все автомобили, рассортированные по пробегу ['Hyundai Solaris', '41000'], ['Volkswagen Passat', '127000'], ['Lada Priora', '139000'], ['UAZ Patriot', '150000'], ['Kia Sorrento', '223000']

Чтобы написать свою программу, дополните шаблон, представленный ниже (test_auto.py).

3) Создайте простой калькулятор, выполняющий два действия с определением правильного порядка их вычисления.
Это задание проверяет основы синтаксического анализа и оценки простого языка.
Требования:
1. Калькулятор должен обрабатывать 4 основные операции +, -, *, / с приоритетом операций.
2. Калькулятор должен обрабатывать отрицательные числа и числа с плавающей точкой.
3. Если вместо одного из операторов найден любой другой символ, калькулятор должен вывести сообщение "Wrong operator”.
4. Если в процессе вычислений предполагается деление на ноль, калькулятор должен вывести сообщение "Division by zero”.
5. Входная строка для вычислений должна иметь вид: 
число пробел оператор пробел число пробел оператор пробел число, например: 5 + 3 * 2.

Чтобы написать свой калькулятор, дополните шаблон, представленный ниже (calc.py) и выполните метод eval().

